#!/bin/bash

read -p "Enter filename: " file

if [[ -f "$file" ]]; then
    cat "$file" | tr -s '[:space:]' '\n' | sort | uniq -c
else
    echo "File does not exist."
fi 

#| tr '[:upper:]' '[:lower:]'


# read -p "Enter filename: " file
# ğŸ‘¶ "Ask the user to type a filename, and remember what they typed in a basket called file."

# read means: Wait for user input.

# -p lets you show a message while waiting.

# file is the variable (a basket to store what user types).

# ğŸŸ© if [[ -f "$file" ]]; then
# ğŸ‘¶ "Check if the basket called file is really a file that exists."

# [[ -f "$file" ]] checks: Is there a real file with this name?

# -f means: "Is it a file (not folder or empty)?"

# If yes â†’ do the stuff inside the then block.

# If no â†’ go to else.

# ğŸŸ© cat "$file"
# ğŸ‘¶ "Read and show the entire content inside the file."

# Like opening a book and reading it out loud.

# ğŸŸ© tr '[:upper:]' '[:lower:]'
# ğŸ‘¶ "Change all capital letters to small letters."

# T stands for translate.

# [:upper:] = A, B, C...

# [:lower:] = a, b, c...

# So, "THIS" becomes "this".

# ğŸŸ© tr -s '[:space:]' '\n'
# ğŸ‘¶ "Turn every space into a new line, and squeeze many spaces into one."

# Makes each word appear on a separate line.

# Easier to count and sort.

# ğŸŸ© sort
# ğŸ‘¶ "Arrange the words in ABC order."

# So a, ball, cat is sorted.

# Helps the next command (uniq) group same words together.

# ğŸŸ© uniq -c
# ğŸ‘¶ "Count how many times each word appears."

# If it sees 3 lines with "hello", it prints 3 hello.

# ğŸŸ¥ else
# ğŸ‘¶ "If there is no file with that name, say so."

# ğŸŸ¥ echo "File does not exist."
# ğŸ‘¶ "Print a message: 'File does not exist.'"

